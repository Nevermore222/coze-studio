/*
 * Copyright 2025 coze-dev Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by hertz generator.

package coze

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"github.com/coze-dev/coze-studio/backend/api/model/plugin_develop"
	common "github.com/coze-dev/coze-studio/backend/api/model/plugin_develop/common"
	"github.com/coze-dev/coze-studio/backend/application/plugin"
	appworkflow "github.com/coze-dev/coze-studio/backend/application/workflow"
)

// GetPlaygroundPluginList .
// @router /api/plugin_api/get_playground_plugin_list [POST]
func GetPlaygroundPluginList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetPlaygroundPluginListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.GetSpaceID() <= 0 {
		invalidParamRequestResponse(c, "spaceID is invalid")
		return
	}
	if req.GetPage() <= 0 {
		invalidParamRequestResponse(c, "page is invalid")
		return
	}
	if req.GetSize() >= 30 {
		invalidParamRequestResponse(c, "size is invalid")
		return
	}

	// when there is only one element in the types list, and the element type is workflow, use workflow service
	// TODO Figure out when there are multiple values for types
	if len(req.GetPluginTypes()) == 1 && req.GetPluginTypes()[0] == int32(common.PluginType_WORKFLOW) {
		resp, err := appworkflow.SVC.GetPlaygroundPluginList(ctx, &req)
		if err != nil {
			internalServerErrorResponse(ctx, c, err)
			return
		}
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp, err := plugin.PluginApplicationSVC.GetPlaygroundPluginList(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// RegisterPluginMeta .
// @router /api/plugin_api/register_plugin_meta [POST]
func RegisterPluginMeta(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.RegisterPluginMetaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.GetName() == "" {
		invalidParamRequestResponse(c, "plugin name is invalid")
		return
	}
	if req.GetDesc() == "" {
		invalidParamRequestResponse(c, "plugin desc is invalid")
		return
	}
	if req.URL != nil && (*req.URL == "" || len(*req.URL) > 512) {
		invalidParamRequestResponse(c, "plugin url is invalid")
		return
	}
	if req.Icon == nil || req.Icon.URI == "" || len(req.Icon.URI) > 512 {
		invalidParamRequestResponse(c, "plugin icon is invalid")
		return
	}
	if req.AuthType == nil {
		invalidParamRequestResponse(c, "plugin auth type is invalid")
		return
	}
	if req.SpaceID <= 0 {
		invalidParamRequestResponse(c, "spaceID is invalid")
		return
	}
	if req.ProjectID != nil {
		if *req.ProjectID <= 0 {
			invalidParamRequestResponse(c, "projectID is invalid")
			return
		}
	}
	if req.GetPluginType() != common.PluginType_PLUGIN {
		invalidParamRequestResponse(c, "plugin type is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.RegisterPluginMeta(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetPluginAPIs .
// @router /api/plugin_api/get_plugin_apis [POST]
func GetPluginAPIs(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetPluginAPIsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if len(req.APIIds) == 0 {
		if req.Page <= 0 {
			invalidParamRequestResponse(c, "page is invalid")
			return
		}
		if req.Size >= 30 {
			invalidParamRequestResponse(c, "size is invalid")
			return
		}
	}

	resp, err := plugin.PluginApplicationSVC.GetPluginAPIs(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetPluginInfo .
// @router /api/plugin_api/get_plugin_info [POST]
func GetPluginInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetPluginInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.GetPluginInfo(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUpdatedAPIs .
// @router /api/plugin_api/get_updated_apis [POST]
func GetUpdatedAPIs(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetUpdatedAPIsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.GetUpdatedAPIs(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetOAuthStatus .
// @router /api/plugin_api/get_oauth_status [POST]
func GetOAuthStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetOAuthStatusRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.GetOAuthStatus(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// CheckAndLockPluginEdit .
// @router /api/plugin_api/check_and_lock_plugin_edit [POST]
func CheckAndLockPluginEdit(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.CheckAndLockPluginEditRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.CheckAndLockPluginEdit(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdatePlugin .
// @router /api/plugin_api/update [POST]
func UpdatePlugin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.UpdatePluginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.AiPlugin == "" {
		invalidParamRequestResponse(c, "plugin manifest is invalid")
		return
	}
	if req.Openapi == "" {
		invalidParamRequestResponse(c, "plugin openapi doc is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.UpdatePlugin(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DeleteAPI .
// @router /api/plugin_api/delete_api [POST]
func DeleteAPI(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.DeleteAPIRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.APIID <= 0 {
		invalidParamRequestResponse(c, "apiID is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.DeleteAPI(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DelPlugin .
// @router /api/plugin_api/del_plugin [POST]
func DelPlugin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.DelPluginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.DelPlugin(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PublishPlugin .
// @router /api/plugin_api/publish_plugin [POST]
func PublishPlugin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.PublishPluginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.VersionName == "" || len(req.VersionName) > 255 {
		invalidParamRequestResponse(c, "version name is invalid")
		return
	}

	match, _ := regexp.MatchString(`^v\d+\.\d+\.\d+$`, req.VersionName)
	if !match {
		invalidParamRequestResponse(c, "version name is invalid")
		return
	}

	if req.VersionDesc == "" {
		invalidParamRequestResponse(c, "version desc is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.PublishPlugin(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdatePluginMeta .
// @router /api/plugin_api/update_plugin_meta [POST]
func UpdatePluginMeta(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.UpdatePluginMetaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.Name != nil && *req.Name == "" {
		invalidParamRequestResponse(c, "plugin name is invalid")
		return
	}
	if req.Desc != nil && *req.Desc == "" {
		invalidParamRequestResponse(c, "plugin desc is invalid")
		return
	}
	if req.URL != nil && (*req.URL == "" || len(*req.URL) > 512) {
		invalidParamRequestResponse(c, "plugin server url is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.UpdatePluginMeta(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetBotDefaultParams .
// @router /api/plugin_api/get_bot_default_params [POST]
func GetBotDefaultParams(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetBotDefaultParamsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.SpaceID <= 0 {
		invalidParamRequestResponse(c, "spaceID is invalid")
		return
	}
	if req.BotID <= 0 {
		invalidParamRequestResponse(c, "botID is invalid")
		return
	}
	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.APIName == "" {
		invalidParamRequestResponse(c, "apiName is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.GetBotDefaultParams(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateBotDefaultParams .
// @router /api/plugin_api/update_bot_default_params [POST]
func UpdateBotDefaultParams(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.UpdateBotDefaultParamsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.SpaceID <= 0 {
		invalidParamRequestResponse(c, "spaceID is invalid")
		return
	}
	if req.BotID <= 0 {
		invalidParamRequestResponse(c, "botID is invalid")
		return
	}
	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.APIName == "" {
		invalidParamRequestResponse(c, "apiName is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.UpdateBotDefaultParams(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// CreateAPI .
// @router /api/plugin_api/create_api [POST]
func CreateAPI(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.CreateAPIRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.Name == "" || len(req.Name) > 255 {
		invalidParamRequestResponse(c, "api name is invalid")
		return
	}
	if req.Desc == "" {
		invalidParamRequestResponse(c, "api desc is invalid")
		return
	}
	if req.Path != nil && (*req.Path == "" || len(*req.Path) > 512) {
		invalidParamRequestResponse(c, "api path is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.CreateAPI(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UpdateAPI .
// @router /api/plugin_api/update_api [POST]
func UpdateAPI(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.UpdateAPIRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.APIID <= 0 {
		invalidParamRequestResponse(c, "apiID is invalid")
		return
	}
	if req.Name != nil && (*req.Name == "" || len(*req.Name) > 255) {
		invalidParamRequestResponse(c, "api name is invalid")
		return
	}
	if req.Desc != nil && (*req.Desc == "" || len(*req.Desc) > 255) {
		invalidParamRequestResponse(c, "api desc is invalid")
		return
	}
	if req.Path != nil && (*req.Path == "" || len(*req.Path) > 512) {
		invalidParamRequestResponse(c, "api path is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.UpdateAPI(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUserAuthority .
// @router /api/plugin_api/get_user_authority [POST]
func GetUserAuthority(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetUserAuthorityRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.GetUserAuthority(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// DebugAPI .
// @router /api/plugin_api/debug_api [POST]
func DebugAPI(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.DebugAPIRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.APIID <= 0 {
		invalidParamRequestResponse(c, "apiID is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.DebugAPI(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// UnlockPluginEdit .
// @router /api/plugin_api/unlock_plugin_edit [POST]
func UnlockPluginEdit(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.UnlockPluginEditRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	resp, err := plugin.PluginApplicationSVC.UnlockPluginEdit(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetPluginNextVersion .
// @router /api/plugin_api/get_plugin_next_version [POST]
func GetPluginNextVersion(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetPluginNextVersionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	resp, err := plugin.PluginApplicationSVC.GetPluginNextVersion(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// RegisterPlugin .
// @router /api/developer/register [POST]
func RegisterPlugin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.RegisterPluginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.GetSpaceID() <= 0 {
		invalidParamRequestResponse(c, "spaceID is invalid")
		return
	}
	if req.ProjectID != nil && *req.ProjectID <= 0 {
		invalidParamRequestResponse(c, "projectID is invalid")
		return
	}
	if req.AiPlugin == "" {
		invalidParamRequestResponse(c, "plugin manifest is invalid")
		return
	}
	if req.Openapi == "" {
		invalidParamRequestResponse(c, "plugin openapi doc is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.RegisterPlugin(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetDevPluginList .
// @router /api/plugin_api/get_dev_plugin_list [POST]
func GetDevPluginList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetDevPluginListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.SpaceID <= 0 {
		invalidParamRequestResponse(c, "spaceID is invalid")
		return
	}
	if req.ProjectID <= 0 {
		invalidParamRequestResponse(c, "projectID is invalid")
		return
	}
	if req.GetPage() <= 0 {
		invalidParamRequestResponse(c, "page is invalid")
		return
	}
	if req.GetSize() <= 0 {
		invalidParamRequestResponse(c, "size is invalid")
		return
	}
	if req.GetSize() > 50 {
		invalidParamRequestResponse(c, "size is too large")
		return
	}

	resp, err := plugin.PluginApplicationSVC.GetDevPluginList(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// Convert2OpenAPI .
// @router /api/plugin_api/convert_to_openapi [POST]
func Convert2OpenAPI(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.Convert2OpenAPIRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.SpaceID <= 0 {
		invalidParamRequestResponse(c, "spaceID is invalid")
		return
	}
	if req.Data == "" {
		invalidParamRequestResponse(c, "data is invalid")
		return
	}
	if req.PluginURL != nil && *req.PluginURL == "" {
		invalidParamRequestResponse(c, "pluginURL is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.Convert2OpenAPI(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetOAuthSchemaAPI .
// @router /api/plugin_api/get_oauth_schema [POST]
func GetOAuthSchemaAPI(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetOAuthSchemaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	resp, err := plugin.PluginApplicationSVC.GetOAuthSchema(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetOAuthSchema .
// @router /api/plugin/get_oauth_schema [POST]
func GetOAuthSchema(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetOAuthSchemaRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	resp, err := plugin.PluginApplicationSVC.GetOAuthSchema(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// BatchCreateAPI .
// @router /api/plugin_api/batch_create_api [POST]
func BatchCreateAPI(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.BatchCreateAPIRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.SpaceID <= 0 {
		invalidParamRequestResponse(c, "spaceID is invalid")
		return
	}
	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}
	if req.AiPlugin == "" {
		invalidParamRequestResponse(c, "plugin manifest is invalid")
		return
	}
	if req.Openapi == "" {
		invalidParamRequestResponse(c, "plugin openapi doc is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.BatchCreateAPI(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// RevokeAuthToken .
// @router /api/plugin_api/revoke_auth_token [POST]
func RevokeAuthToken(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.RevokeAuthTokenRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.PluginID <= 0 {
		invalidParamRequestResponse(c, "pluginID is invalid")
		return
	}

	resp, err := plugin.PluginApplicationSVC.RevokeAuthToken(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetQueriedOAuthPluginList .
// @router /api/plugin_api/get_queried_oauth_plugins [POST]
func GetQueriedOAuthPluginList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req plugin_develop.GetQueriedOAuthPluginListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		invalidParamRequestResponse(c, err.Error())
		return
	}

	if req.BotID <= 0 {
		invalidParamRequestResponse(c, "entityID is required")
		return
	}

	resp, err := plugin.PluginApplicationSVC.GetQueriedOAuthPluginList(ctx, &req)
	if err != nil {
		internalServerErrorResponse(ctx, c, err)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// GetEnvVar .
// @router /api/plugin_api/get_env_var [GET]
func GetEnvVar(ctx context.Context, c *app.RequestContext) {
	name := string(c.Query("name"))
	if name == "" {
		invalidParamRequestResponse(c, "name is required")
		return
	}

	// 只允许获取指定的环境变量，避免安全问题
	allowedVars := map[string]bool{
		"DIFY_API_KEY": true,
	}

	if !allowedVars[name] {
		invalidParamRequestResponse(c, "environment variable not allowed")
		return
	}

	value := os.Getenv(name)
	
	resp := map[string]interface{}{
		"code": 0,
		"msg":  "success", 
		"data": map[string]interface{}{
			"name":  name,
			"value": value,
		},
	}
	
	c.JSON(consts.StatusOK, resp)
}

// ScanDifyApps .
// @router /api/plugin_api/scan_dify_apps [POST]
func ScanDifyApps(ctx context.Context, c *app.RequestContext) {
	var req struct {
		Host   string `json:"host"`
		ApiKey string `json:"api_key"`
	}

	if err := c.BindJSON(&req); err != nil {
		invalidParamRequestResponse(c, "invalid request body")
		return
	}

	if req.Host == "" || req.ApiKey == "" {
		invalidParamRequestResponse(c, "host and api_key are required")
		return
	}

	// 创建 HTTP 客户端
	client := &http.Client{
		Timeout: 30 * time.Second,
	}

	// 调用 Dify API 获取应用信息
	infoUrl := fmt.Sprintf("%s/v1/info", req.Host)
	infoReq, err := http.NewRequest("GET", infoUrl, nil)
	if err != nil {
		invalidParamRequestResponse(c, "failed to create request")
		return
	}

	infoReq.Header.Set("Authorization", fmt.Sprintf("Bearer %s", req.ApiKey))
	infoReq.Header.Set("Content-Type", "application/json")

	infoResp, err := client.Do(infoReq)
	if err != nil {
		invalidParamRequestResponse(c, fmt.Sprintf("failed to call Dify API: %v", err))
		return
	}
	defer infoResp.Body.Close()

	if infoResp.StatusCode != 200 {
		body, _ := io.ReadAll(infoResp.Body)
		invalidParamRequestResponse(c, fmt.Sprintf("Dify API error: %d %s", infoResp.StatusCode, string(body)))
		return
	}

	var infoData map[string]interface{}
	if err := json.NewDecoder(infoResp.Body).Decode(&infoData); err != nil {
		invalidParamRequestResponse(c, "failed to parse Dify response")
		return
	}

	// 构造应用信息
	apps := []map[string]interface{}{}

	// 根据 API Key 类型判断应用类型
	appType := "chat"
	if strings.HasPrefix(req.ApiKey, "app-") {
		appType = "chat"
	} else if strings.HasPrefix(req.ApiKey, "workflow-") {
		appType = "workflow"
	}

	// 从 info API 获取应用基本信息
	appName := "Dify 应用"
	if name, ok := infoData["name"].(string); ok && name != "" {
		appName = name
	}

	app := map[string]interface{}{
		"id":          req.ApiKey,
		"name":        appName,
		"description": fmt.Sprintf("从 %s 导入的 %s 应用", req.Host, appType),
		"type":        appType,
		"api_endpoint": fmt.Sprintf("%s/v1/%s", req.Host, 
			map[string]string{
				"chat": "chat-messages",
				"workflow": fmt.Sprintf("workflows/%s/run", req.ApiKey),
			}[appType]),
		"host":    req.Host,
		"api_key": req.ApiKey,
	}

	apps = append(apps, app)

	resp := map[string]interface{}{
		"code": 0,
		"msg":  "success",
		"data": map[string]interface{}{
			"apps": apps,
		},
	}

	c.JSON(consts.StatusOK, resp)
}

// RegisterDifyPlugin .
// @router /api/plugin_api/register_dify_plugin [POST]
func RegisterDifyPlugin(ctx context.Context, c *app.RequestContext) {
	var req struct {
		Name        string `json:"name"`
		Description string `json:"description"`
		Type        string `json:"type"`
		Host        string `json:"host"`
		ApiKey      string `json:"api_key"`
		SpaceID     int64  `json:"space_id"`
		ProjectID   int64  `json:"project_id"`
	}

	if err := c.BindJSON(&req); err != nil {
		invalidParamRequestResponse(c, "invalid request body")
		return
	}

	// 生成插件清单
	manifest := map[string]interface{}{
		"schema_version":       "v1",
		"name_for_model":       fmt.Sprintf("dify_%s", strings.ReplaceAll(req.Name, " ", "_")),
		"name_for_human":       req.Name,
		"description_for_model": req.Description,
		"description_for_human": req.Description,
		"auth": map[string]interface{}{
			"type":     "service_http",
			"key":      "Authorization",
			"sub_type": "token/api_key",
			"payload":  fmt.Sprintf(`{"key":"Authorization","service_token":"Bearer %s","location":"Header"}`, req.ApiKey),
		},
		"logo_url": "official_plugin_icon/plugin_default.png",
		"api": map[string]interface{}{
			"type": "openapi",
		},
		"common_params": map[string]interface{}{
			"header": []map[string]string{
				{"name": "User-Agent", "value": "Coze/1.0"},
			},
		},
	}

	// 生成 OpenAPI 规范
	var apiPath, operationId string
	if req.Type == "chat" {
		apiPath = "/v1/chat-messages"
		operationId = "dify_chat_messages"
	} else {
		apiPath = fmt.Sprintf("/v1/workflows/%s/run", req.ApiKey)
		operationId = "dify_workflow_run"
	}

	openapi := map[string]interface{}{
		"openapi": "3.0.3",
		"info": map[string]interface{}{
			"title":   req.Name,
			"version": "1.0.0",
		},
		"servers": []map[string]interface{}{
			{"url": req.Host},
		},
		"paths": map[string]interface{}{
			apiPath: map[string]interface{}{
				"post": map[string]interface{}{
					"operationId": operationId,
					"summary":     fmt.Sprintf("调用 Dify %s", req.Name),
					"requestBody": map[string]interface{}{
						"required": true,
						"content": map[string]interface{}{
							"application/json": map[string]interface{}{
								"schema": generateRequestSchema(req.Type),
							},
						},
					},
					"responses": map[string]interface{}{
						"200": map[string]interface{}{
							"description": "OK",
							"content": map[string]interface{}{
								"application/json": map[string]interface{}{
									"schema": map[string]interface{}{
										"type": "object",
										"additionalProperties": true,
									},
								},
							},
						},
					},
				},
			},
		},
	}

	// 转换为 JSON 字符串
	manifestJson, _ := json.Marshal(manifest)
	openapiJson, _ := json.Marshal(openapi)

	resp := map[string]interface{}{
		"code": 0,
		"msg":  "success",
		"data": map[string]interface{}{
			"manifest": string(manifestJson),
			"openapi":  string(openapiJson),
		},
	}

	c.JSON(consts.StatusOK, resp)
}

func generateRequestSchema(appType string) map[string]interface{} {
	if appType == "chat" {
		return map[string]interface{}{
			"type": "object",
			"properties": map[string]interface{}{
				"query": map[string]interface{}{
					"type": "string",
					"description": "用户问题",
				},
				"inputs": map[string]interface{}{
					"type": "object",
					"additionalProperties": true,
					"default": map[string]interface{}{},
					"description": "输入参数",
				},
				"user": map[string]interface{}{
					"type": "string",
					"default": "user",
					"description": "用户标识",
				},
				"conversation_id": map[string]interface{}{
					"type": "string",
					"description": "会话ID",
				},
				"response_mode": map[string]interface{}{
					"type": "string",
					"enum": []string{"blocking"},
					"default": "blocking",
				},
				"stream": map[string]interface{}{
					"type": "boolean",
					"default": false,
				},
			},
			"required": []string{"query"},
		}
	} else {
		return map[string]interface{}{
			"type": "object",
			"properties": map[string]interface{}{
				"inputs": map[string]interface{}{
					"type": "object",
					"additionalProperties": true,
					"description": "工作流输入参数",
				},
				"user": map[string]interface{}{
					"type": "string",
					"default": "user",
					"description": "用户标识",
				},
				"response_mode": map[string]interface{}{
					"type": "string",
					"enum": []string{"blocking"},
					"default": "blocking",
				},
				"stream": map[string]interface{}{
					"type": "boolean",
					"default": false,
				},
			},
			"required": []string{"inputs"},
		}
	}
}
